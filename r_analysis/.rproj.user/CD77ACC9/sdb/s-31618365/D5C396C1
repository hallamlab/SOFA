{
    "contents" : "---\ntitle: \"SOFA Supplementary Methods\"\nauthor: \"Niels Hanson\"\ndate: \"March 28, 2015\"\noutput:\n  html_document:\n    fig_caption: yes\n    keep_md: yes\n    number_sections: yes\n    theme: readable\n    toc: yes\n---\n\nThis document demonstrates the details of the *E.coli* simulations validating the Short-ORF Functional Annotation (SOFA) pipeline. For more information see the [GitHub repo](https://github.com/hallamlab/SOFA) or the paper:\n\n* Aria S. Hahn, Niels W. Hanson, Dongjae Kim, Kishori M. Konwar, Steven J. Hallam. *Assembly independent functional annotation of short-read data using SOFA: Short-ORF Functional Annotation*, Proceedings of the 2015 IEEE Conference on Computational Intelligence in Bioinformatics and Computational Biology (CIBCB 2015), Niagara Falls, Canada, August 12-15, 2015.\n\n# Contents\n\nThis document references the following files:\n\n* [data/genomic_ranges/NC_000913.3_CDS_gr.txt](data/genomic_ranges/NC_000913.3_CDS_gr.txt): Genomic ranges of simulated reads falling within CDS ranges from *E. coli* simulation (i.e., duplicates)\n* [data/genomic_ranges/EcoliSim2_dups_sofa_60.txt](data/genomic_ranges/EcoliSim2_dups_sofa_60.txt):  Genomic ranges of simulated reads falling within CDS ranges from *E. coli* simulation (i.e., duplicates) merged with SOFA results for deduplication \n\n# E. coli Paired-end Simulation\n\n* Load required libraries\n\n```{r message=FALSE, warning=FALSE, error=FALSE}\nlibrary(ggbio)\nlibrary(GenomicRanges)\n```\n\n* Load CDS genomic ranges for *E. coli*\n\n```{r}\necoli_genome_length = 4641652\necoli_df <- read.table(\"data/genomic_ranges/NC_000913.3_CDS_gr.txt\", sep=\"\\t\", header=T, quote = \"\")\necoli_gr <- makeGRangesFromDataFrame(ecoli_df, keep.extra.columns=T)\nseqlengths(ecoli_gr) <- ecoli_genome_length\n```\n\n* Load duplication ranges and calculate statistics:\n\n```{r}\n# load ranges\ndups_df <- read.table(\"data/genomic_ranges/EcoliSim2_dups_sofa_60.txt\", sep=\"\\t\", header=T, quote=\"\")\n\n# calculate duplicate count and proportion\ndbl_count_table <- table(dups_df$dbl_count)\nduplicate_rbs_count <- dbl_count_table[\"TRUE\"]\nnon_duplicate_rbs_count <- dbl_count_table[\"FALSE\"]\nduplicate_rbs_percent <- round(dbl_count_table[\"TRUE\"] * 100 / (dbl_count_table[\"TRUE\"] + dbl_count_table[\"FALSE\"]),2)\nnon_duplicate_rbs_percent <- round(100 - duplicate_rbs_percent,2)\ndedup_duplicate_rbs_count <- nrow(subset(dups_df, dbl_count == TRUE & sofa != FALSE))\ndedup_duplicate_rbs_percent <- round(nrow(subset(dups_df, dbl_count == TRUE & sofa != FALSE)) * 100 / nrow(subset(dups_df, dbl_count == TRUE)), 2)\n```\n\n* Statistics:\n    * Non-duplicate read pairs count and percentage: `r non_duplicate_rbs_count` (`r non_duplicate_rbs_percent`%)\n    * Duplicate read pairs count and percentage: `r duplicate_rbs_count` (`r duplicate_rbs_percent`%)\n    * Deduplicated duplicates read pairs count and percentage (i.e., cases where SOFA effectively removed duplicate rps): `r dedup_duplicate_rbs_count` (`r dedup_duplicate_rbs_percent`%)\n\n```{r}\n# subsample for plotting\nset.seed(31456)\nsample_rows <- sample(1:nrow(dups_df), nrow(dups_df)*0.25, replace = F)\n\n# prepare\ncolors = rep(\"blue\", length(dups_df$dbl_count))\ncolors[dups_df$dbl_count == TRUE] = \"red\"\ndups_df$colors = colors\n\ndedup = rep(\"blue\", length(dups_df$dbl_count))\ndedup[dups_df$sofa == TRUE] = \"pink\"\ndups_df$dedup = dedup\n\ndups_df_small = data.frame(chr=dups_df$chr[sample_rows],\n           start=dups_df$start[sample_rows],\n           end=dups_df$end[sample_rows],\n           strand=dups_df$strand[sample_rows],\n           dbl_count=dups_df$dbl_count[sample_rows],\n           colors=dups_df$colors[sample_rows],\n           sofa=dups_df$dedup[sample_rows])\n\ndups_gr_small <- makeGRangesFromDataFrame(dups_df_small, keep.extra.columns=T)\nseqlengths(dups_gr_small) <- ecoli_genome_length\n```\n\n* Plot CDS ranges\n\n```{r }\np1 <- ggbio()\np1 <- p1 + circle(subset(dups_gr_small, sofa==\"pink\"), geom = \"rect\", color=\"purple\")\np1 <- p1 + circle(subset(dups_gr_small, colors==\"red\"), geom = \"rect\", color=\"red\") \np1 <- p1 + circle(subset(dups_gr_small, colors==\"blue\"), geom = \"rect\", color=\"blue\") \np1 <- p1 + circle(ecoli_gr, geom = \"rect\", color = \"#7EC658\")\np1 <- p1 + circle(ecoli_gr, geom = \"ideo\", fill = \"gray70\") \np1 <- p1 + circle(ecoli_gr, geom = \"scale\", scale.n=10, size = 3)\np1\n```\n\n**Figure**: Validation of the debuplication process implemented by SOFA using simulated read pairs from *E. coli strain K-12 (MG1655)*. The grey ring represents the scale in millions of base pairs. The green ring represents the loci of genes on *E. coli K-12*. The blue ring represents non-deduplicated simulated read pairs (i.e., read pairs without deduplication). The red ring represents 'duplicate' simulated read pairs. Finally, the purple ring presents read pairs deduplicated by SOFA.\n\n* Create pdf ([pdfs/ecoli_simulation_circos.pdf](pdfs/ecoli_simulation_circos.pdf)):\n\n```{r}\npdf(\"pdfs/ecoli_simulation_circos.pdf\")\np1\ndev.off()\n```\n\nPlease send questions and comments to Dr. Steven J. Hallam <shallam@mail.ubc.ca>",
    "created" : 1434927118499.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3461833816",
    "id" : "D5C396C1",
    "lastKnownWriteTime" : 1434933451,
    "path" : "~/Desktop/SOFA/r_analysis2/SOFA_r_analysis.Rmd",
    "project_path" : "SOFA_r_analysis.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}